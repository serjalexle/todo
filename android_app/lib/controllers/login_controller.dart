import 'package:android_app/presentation/screens/home_screen.dart';
import 'package:android_app/providers/user_provider.dart';
import 'package:android_app/services/api_service.dart';
import 'package:android_app/services/storage_service.dart';
import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';

final isLoadingProvider = StateProvider<bool>((ref) => false);
final apiServiceProvider = Provider<ApiService>((ref) => ApiService(ref));
final storageServiceProvider = Provider<StorageService>(
  (ref) => StorageService(),
);

void login(
  BuildContext context,
  WidgetRef ref,
  String email,
  String password,
) async {
  if (email.isEmpty || password.isEmpty) {
    ScaffoldMessenger.of(
      context,
    ).showSnackBar(const SnackBar(content: Text("–í–≤–µ–¥—ñ—Ç—å email —ñ –ø–∞—Ä–æ–ª—å")));
    return;
  }

  ref.read(isLoadingProvider.notifier).state = true;

  try {
    final apiService = ref.read(apiServiceProvider);
    final storageService = ref.read(storageServiceProvider);
    final response = await apiService.login(email.trim(), password.trim());

    final accessToken = response.data['access_token'];
    final refreshToken = response.data['refresh_token'];
    final user = UserModel.fromJson(response.data['result']);

    // üîπ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ–∫–µ–Ω–∏ —É `flutter_secure_storage`
    await storageService.saveTokens(accessToken, refreshToken);

    // üîπ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ `userProvider`
    ref.read(userProvider.notifier).setUser(user);

    debugPrint("–£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥: ${response.data}");
    if (context.mounted) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(const SnackBar(content: Text("–í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π!")));

      // üîπ –ü–µ—Ä–µ–∫–∏–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤—Ö—ñ–¥)
      ref.invalidate(tasksProvider); // <‚Äì –û—á–∏—â–∞—î —Å—Ç–∞—Ä–∏–π –∫–µ—à —ñ –∑–º—É—à—É—î –ø–µ—Ä–µ–∑–∞–ø–∏—Ç–∞—Ç–∏
      context.go('/');
    }
  } on DioException catch (e) {
    String errorMessage = "–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.";

    if (e.response?.data is Map<String, dynamic>) {
      final errorData = e.response!.data as Map<String, dynamic>;
      errorMessage = errorData["detail"] ?? errorMessage;
    } else {
      errorMessage = "–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ.";
    }

    debugPrint("Login Error: $errorMessage");
    if (context.mounted) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text(errorMessage)));
    }
  } catch (e) {
    debugPrint("–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞: $e");
    if (context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")),
      );
    }
  }

  ref.read(isLoadingProvider.notifier).state = false;
}
