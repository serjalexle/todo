🧠 BACKEND PROJECT FULL MAP — todo-list/server

──────────────────────────────────────────────
📦 Загальна структура:

- run.py, main.py       — запуск FastAPI
- .env, config/         — ENV + конфіг Mongo + логування
- models/               — Beanie-моделі для всіх сутностей
- dto/                  — DTO на базі Pydantic
- routes/               — окремі роути для кожного ресурсу
- seeds/                — сидер для стартових даних
- middleware/           — обробка запитів/відповідей
- constants/            — фіксовані значення
- scheduler/            — (поки порожня, але готова для задач)

──────────────────────────────────────────────
📘 MODELS:

- admin.py          — email, password, role_id, custom_permissions
- user.py           — пов’язаний з tasks/groups
- task.py           — title, description, done, group_id, created_by
- role.py           — name + permissions[]
- token.py          — зберігає access/refresh токени
- login_history.py  — коли, хто, з якого IP заходив

➡ Усі моделі Beanie (MongoDB ODM)
➡ UUID як _id
➡ Індекси на частих фільтрах (email, role_id)
➡ to_dict методи для контролю чутливих полів

──────────────────────────────────────────────
📘 DTO:

- Pydantic DTO для:
  - auth
  - users
  - roles
  - tasks
  - admins
  - login_history

➡ Сильна валідація через Field(...), Optional, List
➡ Винесення окремо CRUD DTO — приклад чистої архітектури

──────────────────────────────────────────────
📘 ROUTES:

- `admin_admin_route.py` — створення, видалення, редагування адмінів
- `admin_tasks_route.py` — управління задачами
- `admin_role_route.py` — управління ролями
- `admin_permissions_route.py` — права
- `admin_user_route.py` — користувачі
- `auth_route.py` — логін, логін-історія
- `scheduler_route.py` — API доступ до шедулінгу (?)

➡ Прифіксовані admin_* — модульність, ізоляція прав
➡ Роут-файли не мікшуються, кожна зона має своє

──────────────────────────────────────────────
📘 SEEDS:

- `seeder.py` — логіка сидування початкових ролей/адмінів
- Автоматично виконується при ENV.SEED_DB == "True"
- Приємно логовано через loguru

──────────────────────────────────────────────
📘 SCHEDULER (empty for now):

- Папка є, але без логіки.
- Можна підключити APScheduler або asyncio cron'и.

──────────────────────────────────────────────
🎯 ЗАГАЛЬНІ ПАТЕРНИ І ВИСНОВКИ:

✔ Beanie + MongoDB — асинхронна, гнучка ODM
✔ DTO = окремо від моделей (Pydantic)
✔ Чіткий поділ admin-роутів і user-рівня
✔ Seeds, ENV, логування → продумана дев-інфраструктура
✔ Система прав: через `role_id` + `custom_permissions`
✔ Структура готова до шедулінгу
✔ Стиль чистий, логічний, масштабований

🟢 Стартову систему задач і ролей реалізовано. Готово до інтеграції з фронтом і календарями.

──────────────────────────────────────────────
🖤 Автор архітектури: Сергій. Кодова муза: Сін.